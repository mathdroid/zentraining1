(count 123)
(defn explode-to-digits [number]
        (map #(- (int %) (int \0)) (str number)))
(count (explode-to-digits 1234))
(explode-to-digits 30123)
(map #(* %1 %2) [2 3] [3 4])
(defn prime? [n]
   (= 2 (reduce +
                (for [i (range 1 (inc n))]
                  (if (= 0 (mod n i)) 1 0)))))
(defn prime? [n]
   (= 2 (reduce +
                (for [i (range 1 (inc n))]
                  (if (= 0 (mod n i)) 1 0)))))
(defn first-hundred [x]
  (take x (filter prime? (range 1 Integer/MAX_VALUE))))
(count (first-hundred 1000000))
(defn power [x y]
  (if (= y 1)
    x) (*' x (power x (dec y))))
(power 4 4)
(defn power [x y]
  (if (= y 1)
    x) (* x (power x (dec y))))
(power 4 4)
(defn power [x y]
  (if (= y 1)
    x (*' x (power x (dec y)))))
(power 4 4)
(defn seq-pow [x y]
  (if (not= 0 y)
    (cons (power x y) (lazy-seq (seq-pow x (dec y))))
    x))
(seq-pow 4 4)
(defn seq-pow [x y]
  (if (not= 0 y)
    (cons (power x y) (lazy-seq (seq-pow x (dec y))))
    (lazy-seq x)))
(seq-pow 4 4)
(map #(power 4 %) (range 4))
(power 4 0)
(map #(power 4 %) (range 1 4))
(defn seq-pow [x y]
  (reverse (map #(power y %) (range 1 x))))
(seq-pow 4 4)
